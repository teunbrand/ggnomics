% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/labels-format.R
\name{label_basepair}
\alias{label_basepair}
\alias{basepair_label}
\title{Label numbers as basepairs with SI suffix}
\usage{
label_basepair(
  accuracy = NULL,
  unit = "b",
  sep = NULL,
  labelsmall = FALSE,
  ...
)

basepair_label(x)
}
\arguments{
\item{accuracy}{A number to round to. Use (e.g.) \code{0.01} to show 2 decimal
places of precision. If \code{NULL}, the default, uses a heuristic that should
ensure breaks have the minimum number of digits needed to show the
difference between adjacent values.

Applied to rescaled data.}

\item{unit}{Optional units specifier.}

\item{sep}{Separator between number and SI unit. Defaults to \code{" "} if
\code{units} is supplied, and \code{""} if not.}

\item{labelsmall}{A \code{logical} wether of not append the suffix to values
smaller than 1000 (default: \code{FALSE}).}

\item{...}{Other arguments passed on to \code{\link[base:format]{base::format()}}.}

\item{x}{A vector to label. Can either be \code{numeric} of inherit from
\linkS4class{GenomicRanges}, in which case takes the start positions to
label.}
}
\value{

}
\description{
\code{basepair_label()} automatically scales and labels numbers
  with an appropriate SI suffix, e.g. "kb" for values \eqn{\ge} 1e3, "Mb" for
  \eqn{\ge} 1e6, "Gb" for \eqn{\ge} 1e9.
}
\details{
The \code{label_basepair()} function is a function factory that
  returns a labelling function, i.e. a function that takes a vector \code{x}
  and returns a character vector of length(x) giving a label for each input
  value. The \code{basepair_label()} function is the default labeller from
  \code{label_basepair()} for convenience.

  Note that these functions don't attempt to format numbers smaller than 1,
  as the units \emph{millibasepair} and \emph{centibasepairs} do not make
  sense.

  When used in combination with
  \code{\link[=scale_x_genomic]{scale_(x|y)_genomic}}, these labelling
  functions work best as the \code{minor_labels} argument.
}
\examples{
require(scales)

# The following labels are equivalent
demo_continuous(c(1, 1e9), label = label_basepair())
demo_continuous(c(1, 1e9), label = basepair_label)

# When the label 'bp' is preffered over 'b'
demo_continuous(c(1, 1e9), label = label_basepair(unit = "bp"))
}
